const { ethers } = require("ethers");
const colors = require("colors");
const readline = require("readline");
const fs = require("fs");
const config = require('./config');
const RPC_URL = "https://testnet-rpc.monad.xyz/";
const EXPLORER_URL = "https://testnet.monadexplorer.com/tx/";
const WALLET_FILE = "wallet.txt";
const ACCOUNT_SWITCH_DELAY = 3000;

const ROUTER_CONTRACT = "0x88B96aF200c8a9c35442C8AC6cd3D22695AaE4F0";
const USDT_CONTRACT = "0x88b8E2161DEDC77EF4ab7585569D2415a1C1055D";

const availableTokens = {
  MON: { name: "MON", address: null, decimals: 18, native: true },
  USDT: { name: "USDT", address: USDT_CONTRACT, decimals: 6, native: false },
};

const ROUTER_ABI = [
  "function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts)",
  "function userCmd(uint16 callpath, bytes calldata cmd) public payable returns (bytes memory)",
  "function acceptCrocDex() public pure returns (bool)",
  "function swap(address base, address quote, uint256 poolIdx, bool isBuy, bool inBaseQty, uint128 qty, uint16 tip, uint128 limitPrice, uint128 minOut, uint8 reserveFlags) external payable returns (int128 baseFlow, int128 quoteFlow)"
];

const ERC20_ABI = [
  "function balanceOf(address account) view returns (uint256)",
  "function approve(address spender, uint256 value) returns (bool)",
  "function allowance(address owner, address spender) view returns (uint256)",
  "function transfer(address to, uint256 value) returns (bool)",
  "function transferFrom(address from, address to, uint256 value) returns (bool)",
  "function decimals() view returns (uint8)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function totalSupply() view returns (uint256)"
];

function readPrivateKeys() {
  try {
    const data = fs.readFileSync(WALLET_FILE, 'utf8');
    const privateKeys = data.split('\n')
      .map(key => key.trim())
      .filter(key => key !== '');
    
    return privateKeys;
  } catch (error) {
    console.error(`‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file wallet.txt: ${error.message}`.red);
    process.exit(1);
  }
}

function roundAmount(amount, tokenDecimals) {
  try {
    const amountStr = ethers.utils.formatUnits(amount, tokenDecimals);
    
    let roundedValue;
    if (tokenDecimals === 18) {
      roundedValue = Math.ceil(parseFloat(amountStr) * 1000) / 1000;
    } else if (tokenDecimals === 6) {
      roundedValue = Math.ceil(parseFloat(amountStr) * 100) / 100;
    } else {
      roundedValue = Math.ceil(parseFloat(amountStr) * 100) / 100;
    }
    
    return ethers.utils.parseUnits(roundedValue.toString(), tokenDecimals);
  } catch (error) {
    console.error(`‚ùå Error rounding amount: ${error.message}`.red);
    return amount;
  }
}

async function getRandomAmount(wallet, token, isToMON = false) {
  try {
    let balance;
    if (token.native) {
      balance = await wallet.getBalance();
    } else {
      const tokenContract = new ethers.Contract(token.address, ERC20_ABI, wallet);
      balance = await tokenContract.balanceOf(wallet.address);
    }
    
    if (isToMON) {
      return roundAmount(balance.mul(99).div(100), token.decimals);
    }
    
    const minPercentage = config.transactionLimits.minPercentage;
    const maxPercentage = config.transactionLimits.maxPercentage;
    
    const min = balance.mul(minPercentage * 10).div(1000);
    const max = balance.mul(maxPercentage * 10).div(1000);
    
    const minAmount = ethers.utils.parseUnits("0.0001", token.decimals);
    if (min.lt(minAmount)) {
      console.log("‚ö†Ô∏è S·ªë d∆∞ qu√° th·∫•p, s·ª≠ d·ª•ng s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu".yellow);
      return roundAmount(minAmount, token.decimals);
    }
    
    const range = max.sub(min);
    const randomValue = ethers.BigNumber.from(
      ethers.utils.randomBytes(32)
    ).mod(range);
    const amount = min.add(randomValue);
    
    return roundAmount(amount, token.decimals);
  } catch (error) {
    console.error("‚ùå Error calculating random amount:".red, error);
    const defaultAmount = ethers.utils.parseUnits("0.01", token.decimals);
    return roundAmount(defaultAmount, token.decimals);
  }
}

function getRandomDelay() {
  const minDelay = 30 * 1000;
  const maxDelay = 1 * 60 * 1000;
  return Math.floor(Math.random() * (maxDelay - minDelay + 1) + minDelay);
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function getTokenBalance(wallet, token, maxRetries = 5) {
    let retries = 0;
    
    while (retries <= maxRetries) {
      try {
        if (token.native) {
          const balance = await wallet.provider.getBalance(wallet.address);
          return {
            raw: balance,
            formatted: ethers.utils.formatUnits(balance, token.decimals)
          };
        } else {
          const tokenContract = new ethers.Contract(token.address, ERC20_ABI, wallet);
          const balance = await tokenContract.balanceOf(wallet.address);
          return {
            raw: balance,
            formatted: ethers.utils.formatUnits(balance, token.decimals)
          };
        }
      } catch (error) {
        retries++;
        if (retries > maxRetries) {
          console.error(`‚ùå L·ªói l·∫•y s·ªë d∆∞ token ${token.name} sau ${maxRetries} l·∫ßn th·ª≠: ${error.message}`.red);
          return { raw: ethers.BigNumber.from(0), formatted: "0" };
        }
        
        console.log(`‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞ token ${token.name} (l·∫ßn th·ª≠ ${retries}/${maxRetries}): ${error.message}`.yellow);
        console.log(`‚è±Ô∏è ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`.yellow);
        await delay(5000);
      }
    }
  }

async function approveTokenIfNeeded(wallet, token, amount, routerAddress) {
  if (token.native) return true;
  
  try {
    const tokenContract = new ethers.Contract(token.address, ERC20_ABI, wallet);
    const allowance = await tokenContract.allowance(wallet.address, routerAddress);
    
    if (allowance.lt(amount)) {
      console.log(`‚öôÔ∏è ƒêang approve token ${token.name}...`.cyan);
      const tx = await tokenContract.approve(routerAddress, ethers.constants.MaxUint256);
      console.log(`üöÄ Approve Tx Sent! ${EXPLORER_URL}${tx.hash}`.yellow);
      await tx.wait();
      console.log(`‚úÖ Token ${token.name} ƒë√£ ƒë∆∞·ª£c approved`.green);
    } else {
      console.log(`‚úÖ Token ${token.name} ƒë√£ ƒë∆∞·ª£c approved t·ª´ tr∆∞·ªõc`.green);
    }
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói approve token ${token.name}: ${error.message}`.red);
    return false;
  }
}

function encodeSwapParams(baseToken, quoteToken, amountIn, amountOutMin, isBuy, inBaseQty) {
  const poolIdx = 0x8ca0;
  const tip = 0;
  
  const limitPrice = isBuy 
    ? "0xffff5433e2b3d8211706e6102aa9471" 
    : "0x0000000000000000000000000000001"; 
  
  const reserveFlags = 0; 
  
  const abiCoder = new ethers.utils.AbiCoder();
  
  return abiCoder.encode(
    [
      'address',  
      'address',  
      'uint256',  
      'bool',     
      'bool',     
      'uint128',  
      'uint16',   
      'uint128',  
      'uint128',  
      'uint8'     
    ],
    [
      baseToken,
      quoteToken,
      poolIdx,
      isBuy,
      inBaseQty,
      amountIn,
      tip,
      limitPrice,
      amountOutMin,
      reserveFlags
    ]
  );
}

function encodeSwapParamsFixed(baseToken, quoteToken, amountIn, amountOutMin, isBuy, inBaseQty, limitPrice) {
  const poolIdx = 0x8ca0;
  const tip = 0;
  
  const reserveFlags = 0x02;
  
  const abiCoder = new ethers.utils.AbiCoder();
  
  return abiCoder.encode(
    [
      'address',  
      'address',  
      'uint256',  
      'bool',     
      'bool',     
      'uint128',  
      'uint16',   
      'uint128',  
      'uint128',  
      'uint8'     
    ],
    [
      baseToken,
      quoteToken,
      poolIdx,
      isBuy,
      inBaseQty,
      amountIn,
      tip,
      limitPrice,
      amountOutMin,
      reserveFlags
    ]
  );
}

async function swapTokens(wallet, tokenA, tokenB, amountIn, isToMON = false) {
  try {
    const roundedAmountIn = roundAmount(amountIn, tokenA.decimals);

    if (tokenA.native) {
      return await swapNativeToken(wallet, tokenB, roundedAmountIn);
    }
    
    if (!tokenA.native) {
      const approveSuccess = await approveTokenIfNeeded(wallet, tokenA, roundedAmountIn, ROUTER_CONTRACT);
      if (!approveSuccess) {
        console.log(`‚ùå Kh√¥ng th·ªÉ approve token ${tokenA.name}. B·ªè qua giao d·ªãch n√†y.`.red);
        return false;
      }
    }
    
    const routerContract = new ethers.Contract(ROUTER_CONTRACT, ROUTER_ABI, wallet);
    
    let isBuy, inBaseQty;
    let baseAddress, quoteAddress;
    
    if (tokenB.native) {
      isBuy = false; 
      inBaseQty = false;
      baseAddress = ethers.constants.AddressZero;
      quoteAddress = tokenA.address;
    } else if (tokenA.native) {
      isBuy = false;
      inBaseQty = true;
      baseAddress = ethers.constants.AddressZero;
      quoteAddress = tokenB.address;
    } else {
      baseAddress = tokenB.address;
      quoteAddress = tokenA.address;
      isBuy = true;  
      inBaseQty = false;
    }
    
    const minAmountOut = roundedAmountIn.mul(97).div(100);
    
    const formattedAmountIn = ethers.utils.formatUnits(roundedAmountIn, tokenA.decimals);
    
    console.log(`üîÑ Swap ${formattedAmountIn} ${tokenA.name} ‚Üí ${tokenB.name}`.magenta);
    console.log(`Parameters: Base: ${baseAddress}, Quote: ${quoteAddress}, isBuy: ${isBuy}, inBaseQty: ${inBaseQty}`);
    
    const feeData = await wallet.provider.getFeeData();
    const randomGasLimit = Math.floor(Math.random() * (350000 - 250000 + 1)) + 250000;
    const txOverrides = {
      gasLimit: randomGasLimit,
      maxFeePerGas: feeData.maxFeePerGas || feeData.gasPrice,
      maxPriorityFeePerGas: feeData.maxPriorityFeePerGas || feeData.gasPrice
    };
    
    if (tokenA.native) {
      txOverrides.value = roundedAmountIn;
    }
    
    try {
      const callpath = 1;
      
      const limitPrice = isBuy 
        ? "0x0000000000000000000000000000010001" 
        : "0x0000000000000000000000000000000001";

      const swapParams = encodeSwapParamsFixed(
        baseAddress,
        quoteAddress,
        roundedAmountIn,
        minAmountOut,
        isBuy,
        inBaseQty,
        limitPrice
      );
      
      const tx = await routerContract.userCmd(callpath, swapParams, txOverrides);
      
      console.log(`üöÄ Swap Tx Sent! ${EXPLORER_URL}${tx.hash}`.yellow);
      const receipt = await tx.wait();
      console.log(`‚úÖ Swap ${tokenA.name} ‚Üí ${tokenB.name} th√†nh c√¥ng (Block ${receipt.blockNumber})`.green.underline);
      return true;
    } catch (error) {
      console.error(`‚ùå L·ªói khi g·ª≠i giao d·ªãch swap ${tokenA.name} ‚Üí ${tokenB.name}: ${error.message}`.red);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói swap ${tokenA.name} ‚Üí ${tokenB.name}:`.red);
    return false;
  }
}

async function swapNativeToken(wallet, targetToken, amountIn) {
  try {
    const roundedAmountIn = roundAmount(amountIn, 18);
    
    console.log(`üîÑ Swap ${ethers.utils.formatEther(roundedAmountIn)} MON ‚Üí ${targetToken.name}...`.magenta);
    
    const routerContract = new ethers.Contract(ROUTER_CONTRACT, ROUTER_ABI, wallet);
    
    const feeData = await wallet.provider.getFeeData();
    const randomGasLimit = Math.floor(Math.random() * (350000 - 250000 + 1)) + 250000;
    const txOverrides = {
      value: roundedAmountIn,
      gasLimit: randomGasLimit,
      maxFeePerGas: feeData.maxFeePerGas || feeData.gasPrice,
      maxPriorityFeePerGas: feeData.maxPriorityFeePerGas || feeData.gasPrice
    };
    
    const callpath = 1;
    
    const minAmountOut = roundedAmountIn.mul(95).div(100);
    
    const swapParams = encodeSwapParams(
      ethers.constants.AddressZero,
      targetToken.address,
      roundedAmountIn,
      minAmountOut,
      false,
      true  
    );
    
    const tx = await routerContract.userCmd(callpath, swapParams, txOverrides);
    
    console.log(`‚úîÔ∏è Swap MON ‚Üí ${targetToken.name} th√†nh c√¥ng`.green.underline);
    console.log(`‚û°Ô∏è Transaction sent: ${EXPLORER_URL}${tx.hash}`.yellow);
    await tx.wait();
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói swap MON ‚Üí ${targetToken.name}:`.red, error);
    console.error(error);
    return false;
  }
}

async function swapMonToToken(wallet, token) {
  try {
    console.log(`‚ö†Ô∏è S·ªë d∆∞ ${token.name} qu√° th·∫•p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch`.yellow);
    console.log(`üîÑ ƒêang swap MON sang ${token.name} ƒë·ªÉ ti·∫øp t·ª•c giao d·ªãch...`.cyan);
    
    const monBalance = await getTokenBalance(wallet, availableTokens.MON);
    if (monBalance.raw.isZero() || monBalance.raw.lt(ethers.utils.parseUnits("0.001", 18))) {
      console.log(`‚ùå S·ªë d∆∞ MON qu√° th·∫•p ƒë·ªÉ th·ª±c hi·ªán swap`.red);
      return false;
    }
    
    const randomAmount = await getRandomAmount(wallet, availableTokens.MON);
    const swapSuccess = await swapTokens(wallet, availableTokens.MON, token, randomAmount);
    
    if (swapSuccess) {
      const newBalance = await getTokenBalance(wallet, token);
      console.log(`‚úÖ ƒê√£ swap MON sang ${token.name}. S·ªë d∆∞ m·ªõi: ${newBalance.formatted} ${token.name}`.green);
      return true;
    } else {
      console.log(`‚ùå Kh√¥ng th·ªÉ swap MON sang ${token.name}`.red);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi swap MON sang ${token.name}: ${error.message}`.red);
    return false;
  }
}

async function getRandomTokenPair() {
  const tokenKeys = Object.keys(availableTokens);
  const tokenAIndex = Math.floor(Math.random() * tokenKeys.length);
  let tokenBIndex;
  
  do {
    tokenBIndex = Math.floor(Math.random() * tokenKeys.length);
  } while (tokenBIndex === tokenAIndex);
  
  return [availableTokens[tokenKeys[tokenAIndex]], availableTokens[tokenKeys[tokenBIndex]]];
}

async function performSwapCycle(wallet, cycleNumber, totalCycles) {
  try {
    console.log(`Chu k√¨ ${cycleNumber} / ${totalCycles}:`.magenta);
    
    const [tokenA, tokenB] = await getRandomTokenPair();
    console.log(`üîÄ ƒê√£ ch·ªçn c·∫∑p giao d·ªãch: ${tokenA.name} ‚Üí ${tokenB.name}`.cyan);
    
    const balanceA = await getTokenBalance(wallet, tokenA);
    console.log(`üí∞ S·ªë d∆∞ ${tokenA.name}: ${balanceA.formatted}`.cyan);
    
    let continueWithTokenA = true;
    if (balanceA.raw.isZero() || balanceA.raw.lt(ethers.utils.parseUnits("0.0001", tokenA.decimals))) {
      if (!tokenA.native) {
        continueWithTokenA = await swapMonToToken(wallet, tokenA);
      } else {
        console.log(`‚ö†Ô∏è S·ªë d∆∞ MON qu√° th·∫•p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch`.yellow);
        continueWithTokenA = false;
      }
      
      if (!continueWithTokenA) {
        console.log(`‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c v·ªõi token ${tokenA.name}, th·ª≠ c·∫∑p token kh√°c`.yellow);
        return await retryWithDifferentPair(wallet, tokenA);
      }
    }
    
    const isToNative = tokenB.native;
    const randomAmount = await getRandomAmount(wallet, tokenA, isToNative);
    
    const swapSuccess = await swapTokens(wallet, tokenA, tokenB, randomAmount, isToNative);
    if (!swapSuccess) {
      console.log(`‚ùå Swap ${tokenA.name} ‚Üí ${tokenB.name} th·∫•t b·∫°i, th·ª≠ c·∫∑p token kh√°c`.yellow);
      return await retryWithDifferentPair(wallet, tokenA);
    }
    
    const randomDelay = getRandomDelay();
    console.log(`‚è±Ô∏è ƒê·ª£i ${Math.floor(randomDelay / 1000)} gi√¢y...`.cyan);
    await delay(randomDelay);
    
    const balanceB = await getTokenBalance(wallet, tokenB);
    console.log(`üí∞ S·ªë d∆∞ ${tokenB.name}: ${balanceB.formatted}`.cyan);
    
    let continueWithTokenB = true;
    if (balanceB.raw.isZero() || balanceB.raw.lt(ethers.utils.parseUnits("0.0001", tokenB.decimals))) {
      if (!tokenB.native) {
        continueWithTokenB = await swapMonToToken(wallet, tokenB);
      } else {
        console.log(`‚ö†Ô∏è S·ªë d∆∞ MON qu√° th·∫•p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch ng∆∞·ª£c l·∫°i`.yellow);
        continueWithTokenB = false;
      }
      
      if (!continueWithTokenB) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ swap ng∆∞·ª£c l·∫°i, nh∆∞ng giao d·ªãch ban ƒë·∫ßu ƒë√£ th√†nh c√¥ng`.yellow);
        return true;
      }
    }
    
    const isReversalToNative = tokenA.native;
    const reverseAmount = await getRandomAmount(wallet, tokenB, isReversalToNative);
    const reverseSwapSuccess = await swapTokens(wallet, tokenB, tokenA, reverseAmount, isReversalToNative);
    
    if (!reverseSwapSuccess) {
      console.log(`‚ö†Ô∏è Swap ng∆∞·ª£c ${tokenB.name} ‚Üí ${tokenA.name} th·∫•t b·∫°i`.yellow);
      return true;
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói chu k·ª≥ swap: ${error.message}`.red);
    return false;
  }
}

async function retryWithDifferentPair(wallet, excludeToken) {
  try {
    console.log(`üîÑ Th·ª≠ l·∫°i v·ªõi c·∫∑p token kh√°c...`.cyan);
    
    const validTokens = Object.values(availableTokens).filter(token => token.name !== excludeToken.name);
    if (validTokens.length < 2) {
      console.log(`‚ö†Ô∏è Kh√¥ng ƒë·ªß token h·ª£p l·ªá ƒë·ªÉ th·ª≠ l·∫°i`.yellow);
      return false;
    }
    
    const tokenAIndex = Math.floor(Math.random() * validTokens.length);
    const tokenA = validTokens[tokenAIndex];
    
    let tokenBIndex;
    do {
      tokenBIndex = Math.floor(Math.random() * validTokens.length);
    } while (tokenBIndex === tokenAIndex);
    const tokenB = validTokens[tokenBIndex];
    
    console.log(`üîÄ Th·ª≠ l·∫°i v·ªõi c·∫∑p: ${tokenA.name} ‚Üí ${tokenB.name}`.cyan);
    
    const balanceA = await getTokenBalance(wallet, tokenA);
    console.log(`üí∞ S·ªë d∆∞ ${tokenA.name}: ${balanceA.formatted}`.cyan);
    
    let continueWithTokenA = true;
    if (balanceA.raw.isZero() || balanceA.raw.lt(ethers.utils.parseUnits("0.0001", tokenA.decimals))) {
      if (!tokenA.native) {
        continueWithTokenA = await swapMonToToken(wallet, tokenA);
      } else {
        console.log(`‚ö†Ô∏è S·ªë d∆∞ MON qu√° th·∫•p ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch`.yellow);
        continueWithTokenA = false;
      }
      
      if (!continueWithTokenA) {
        console.log(`‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c v·ªõi token ${tokenA.name}`.yellow);
        return false;
      }
    }
    
    const isToNative = tokenB.native;
    const randomAmount = await getRandomAmount(wallet, tokenA, isToNative);
    
    return await swapTokens(wallet, tokenA, tokenB, randomAmount, isToNative);
  } catch (error) {
    console.error(`‚ùå L·ªói khi th·ª≠ l·∫°i: ${error.message}`.red);
    return false;
  }
}

async function runSwapCyclesForAccount(privateKey, cycles) {
  try {
    if (!privateKey.startsWith('0x')) {
      privateKey = '0x' + privateKey;
    }
    
    const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
    const wallet = new ethers.Wallet(privateKey, provider);

    const address = wallet.address;
    const truncatedAddress = `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
    console.log(`\nüë§ ƒêang x·ª≠ l√Ω t√†i kho·∫£n: ${truncatedAddress}`.cyan);
    
    const balance = await wallet.getBalance();
    console.log(`üí∞ Balance: ${ethers.utils.formatEther(balance)} MON`.cyan);

    let completedCycles = 0;
    for (let i = 0; i < cycles; i++) {
      const success = await performSwapCycle(wallet, i + 1, cycles);
      if (success) {
        completedCycles++;
      } else {
        console.log(`‚ö†Ô∏è Chu k·ª≥ ${i + 1} th·∫•t b·∫°i, chuy·ªÉn sang chu k·ª≥ ti·∫øp theo`.yellow);
      }
      
      if (i < cycles - 1) {
        const cycleDelay = getRandomDelay() * 2;
        console.log(`‚è±Ô∏è ƒê·ª£i ${Math.floor(cycleDelay / 1000)} gi√¢y tr∆∞·ªõc chu k·ª≥ ti·∫øp theo...`.cyan);
        await delay(cycleDelay);
      }
    }
    
    console.log(`‚úÖ Ho√†n th√†nh ${completedCycles}/${cycles} chu k√¨ cho t√†i kho·∫£n ${truncatedAddress}`.green);
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói x·ª≠ l√Ω t√†i kho·∫£n, xem l·∫°i privatekey ƒë√£ ƒë√∫ng ch∆∞a ${privateKey.substring(0, 6)}...: ${error.message}`.red);
    return false;
  }
}

async function processAllAccounts(cycles, interval) {
  try {
    const privateKeys = readPrivateKeys();
    console.log(`üìã T√¨m th·∫•y ${privateKeys.length} t√†i kho·∫£n trong wallet.txt`.cyan);
    
    for (let i = 0; i < privateKeys.length; i++) {
      console.log(`\nüîÑ ƒêang x·ª≠ l√Ω t√†i kho·∫£n ${i + 1} of ${privateKeys.length}`.cyan);
      const success = await runSwapCyclesForAccount(privateKeys[i], cycles);
      
      if (!success) {
        console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω t√†i kho·∫£n ${i + 1}, chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo`.yellow);
      }
      
      if (i < privateKeys.length - 1) {
        console.log(`‚è±Ô∏è Ch·ªù 3 gi√¢y tr∆∞·ªõc khi chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo...`.cyan);
        await delay(ACCOUNT_SWITCH_DELAY);
      }
    }
    
    if (interval) {
      console.log(`\n‚è±Ô∏è T·∫•t c·∫£ c√°c t√†i kho·∫£n ƒë∆∞·ª£c x·ª≠ l√Ω. ƒê·ª£t ti·∫øp theo s·∫Ω ch·∫°y v√†o ${interval} gi·ªù`.cyan);
      setTimeout(() => processAllAccounts(cycles, interval), interval * 60 * 60 * 1000);
    } else {
      console.log(`\n‚úÖ T·∫•t c·∫£ c√°c t√†i kho·∫£n ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng`.green.bold);
    }
  } catch (error) {
    console.error(`‚ùå L·ªói r·ªìi: ${error.message}`.red);
  }
}

function run() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question(
    "B·∫°n mu·ªën th·ª±c hi·ªán bao nhi√™u chu k·ª≥ cho m·ªói t√†i kho·∫£n? (Enter m·∫∑c ƒë·ªãnh 1): ",
    (cycles) => {
      rl.question(
        "B·∫°n mu·ªën m·ªói chu k√¨ ch·∫°y bao l√¢u m·ªôt l·∫ßn (t√≠nh b·∫±ng gi·ªù)? (Nh·∫•n enter ƒë·ªÉ ch·∫°y lu√¥n): ",
        (hours) => {
          let cyclesCount = cycles ? parseInt(cycles) : 1;
          let intervalHours = hours ? parseInt(hours) : null;

          if (
            isNaN(cyclesCount) ||
            (intervalHours !== null && isNaN(intervalHours))
          ) {
            console.log("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.".red);
            rl.close();
            return;
          }
          
          processAllAccounts(cyclesCount, intervalHours);
          rl.close();
        }
      );
    }
  );
}

async function runAutomated(cycles = 1, intervalHours = null) {
  await processAllAccounts(cycles, intervalHours);
  return true;
}

module.exports = { 
  run, 
  runAutomated 
};

if (require.main === module) {
  run();
}