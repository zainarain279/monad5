const ethers = require("ethers");
const colors = require("colors");
const readline = require("readline");
const fs = require("fs");
const config = require('./config');
const RPC_URL = "https://testnet-rpc.monad.xyz/";
const EXPLORER_URL = "https://testnet.monadexplorer.com/tx/";
const provider = new ethers.providers.JsonRpcProvider(RPC_URL);
const contractAddress = "0x3a98250F98Dd388C211206983453837C8365BDc1";
const gasLimitDeposit = 500000;
const gasLimitRedeem = 800000;
const gasLimitBond = 600000;

const contractABI = [
  {
    "type": "function",
    "name": "deposit",
    "inputs": [
      {
        "name": "assets",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "redeem",
    "inputs": [
      {
        "name": "shares",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "bond",
    "inputs": [
      {
        "name": "policyID",
        "type": "uint64",
        "internalType": "uint64"
      },
      {
        "name": "bondRecipient",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
];

function readPrivateKeys() {
  try {
    const data = fs.readFileSync('wallet.txt', 'utf8');
    const privateKeys = data.split('\n')
      .map(key => key.trim())
      .filter(key => key.length > 0);
    
    console.log(`T√¨m th·∫•y ${privateKeys.length} v√≠ trong wallet.txt`.green);
    return privateKeys;
  } catch (error) {
    console.error("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file wallet.txt:".red, error.message);
    process.exit(1);
  }
}

async function getRandomAmount(wallet) {
  try {
    const balance = await provider.getBalance(wallet.address);
    const minPercentage = config.transactionLimits.minPercentage;
    const maxPercentage = config.transactionLimits.maxPercentage;
    
    const min = balance.mul(minPercentage * 10).div(1000);
    const max = balance.mul(maxPercentage * 10).div(1000);
    
    if (min.lt(ethers.utils.parseEther(config.minimumTransactionAmount))) {
      console.log("S·ªë d∆∞ qu√° th·∫•p, s·ª≠ d·ª•ng s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu".yellow);
      return ethers.utils.parseEther(config.minimumTransactionAmount);
    }
    
    const range = max.sub(min);
    const randomBigNumber = ethers.BigNumber.from(
      ethers.utils.randomBytes(32)
    ).mod(range);
    
    const randomAmount = min.add(randomBigNumber);
    
    return randomAmount;
  } catch (error) {
    console.error("‚ùå Error calculating random amount:".red, error.message);
    return ethers.utils.parseEther(config.defaultTransactionAmount);
  }
}

function getRandomDelay() {
  const minDelay = 30 * 1000;
  const maxDelay = 1 * 60 * 1000;
  return Math.floor(Math.random() * (maxDelay - minDelay + 1) + minDelay);
}

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

async function depositMON(wallet, cycleNumber) {
  try {
    console.log(`\n[Chu k·ª≥ ${cycleNumber}] b·∫Øt ƒë·∫ßu deposit MON...`.magenta);
    console.log(`Wallet: ${wallet.address}`.cyan);

    const depositAmount = await getRandomAmount(wallet);
    console.log(
      `Random s·ªë l∆∞·ª£ng deposit: ${ethers.utils.formatEther(depositAmount)} MON (${config.transactionLimits.minPercentage}-${config.transactionLimits.maxPercentage}% balance)`
    );

    const contract = new ethers.Contract(contractAddress, contractABI, wallet);
    
    console.log("üîÑ G·ª≠i y√™u c·∫ßu deposit...");
    const txResponse = await contract.deposit(
      depositAmount,
      wallet.address,
      {
        value: depositAmount,
        gasLimit: ethers.utils.hexlify(gasLimitDeposit)
      }
    );
    
    console.log(
      `‚û°Ô∏è Transaction sent: ${EXPLORER_URL}${txResponse.hash}`.yellow
    );

    console.log("ƒêang ch·ªù x√°c nh·∫≠n giao d·ªãch...");
    const receipt = await txResponse.wait();
    console.log(`‚úîÔ∏è Deposit th√†nh c√¥ng!`.green.underline);

    return { receipt, depositAmount };
  } catch (error) {
    console.error("‚ùå Deposit th·∫•t b·∫°i:".red, error.message);
    throw error;
  }
}

async function getShmonBalance(wallet) {
  try {
    const contract = new ethers.Contract(contractAddress, contractABI, provider);
    const balance = await contract.balanceOf(wallet.address);
    return balance;
  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra s·ªë d∆∞ shMON:".red, error.message);
    throw error;
  }
}

async function redeemShMON(wallet, cycleNumber) {
  try {
    console.log(`\n[Chu k·ª≥ ${cycleNumber}] chu·∫©n b·ªã redeem shMON...`.magenta);
    console.log(`Wallet: ${wallet.address}`.cyan);
    
    const shmonBalance = await getShmonBalance(wallet);
    console.log(`S·ªë d∆∞ shMON hi·ªán t·∫°i: ${ethers.utils.formatEther(shmonBalance)} shMON`);
    
    const redeemAmount = shmonBalance.mul(98).div(100);
    console.log(`S·ªë l∆∞·ª£ng redeem (98%): ${ethers.utils.formatEther(redeemAmount)} shMON`);
    
    if (redeemAmount.lte(0)) {
      console.log("Kh√¥ng c√≥ shMON ƒë·ªÉ redeem".yellow);
      return null;
    }
    
    const contract = new ethers.Contract(contractAddress, contractABI, wallet);
    
    console.log("üîÑ G·ª≠i y√™u c·∫ßu redeem...");
    const txResponse = await contract.redeem(
      redeemAmount,
      wallet.address,
      wallet.address,
      {
        gasLimit: ethers.utils.hexlify(gasLimitRedeem)
      }
    );
    
    console.log(
      `‚û°Ô∏è Transaction sent: ${EXPLORER_URL}${txResponse.hash}`.yellow
    );

    console.log("üîÑ ƒêang ch·ªù x√°c nh·∫≠n giao d·ªãch...");
    const receipt = await txResponse.wait();
    console.log(`‚úîÔ∏è Redeem th√†nh c√¥ng!`.green.underline);

    return receipt;
  } catch (error) {
    console.error("‚ùå Redeem th·∫•t b·∫°i:".red, error.message);
    throw error;
  }
}


async function bondShMON(wallet, cycleNumber) {
  try {
    console.log(`\n[Chu k·ª≥ ${cycleNumber}] chu·∫©n b·ªã commit shMON...`.magenta);
    console.log(`Wallet: ${wallet.address}`.cyan);
    
    const shmonBalance = await getShmonBalance(wallet);
    console.log(`S·ªë d∆∞ shMON c√≤n l·∫°i: ${ethers.utils.formatEther(shmonBalance)} shMON`);
    
    const bondAmount = shmonBalance.mul(50).div(100);
    console.log(`S·ªë l∆∞·ª£ng commit (50%): ${ethers.utils.formatEther(bondAmount)} shMON`);
    
    if (bondAmount.lte(0)) {
      console.log("Kh√¥ng c√≥ shMON ƒë·ªÉ commit".yellow);
      return null;
    }
    
    const contract = new ethers.Contract(contractAddress, contractABI, wallet);
    const policyID = 4; // PolicyID m·∫∑c ƒë·ªãnh l√† 4
    
    console.log("üîÑ G·ª≠i y√™u c·∫ßu commit...");
    const txResponse = await contract.bond(
      policyID,
      wallet.address,
      bondAmount,
      {
        gasLimit: ethers.utils.hexlify(gasLimitBond)
      }
    );
    
    console.log(
      `‚û°Ô∏è Transaction sent: ${EXPLORER_URL}${txResponse.hash}`.yellow
    );

    console.log("üîÑ ƒêang ch·ªù x√°c nh·∫≠n giao d·ªãch...");
    const receipt = await txResponse.wait();
    console.log(`‚úîÔ∏è Commit th√†nh c√¥ng!`.green.underline);

    return receipt;
  } catch (error) {
    console.error("‚ùå Commit th·∫•t b·∫°i:".red, error.message);
    throw error;
  }
}

async function runCycle(wallet, cycleNumber) {
  try {
    console.log(`\n=== B·∫Øt ƒë·∫ßu chu k·ª≥ ${cycleNumber} / ${wallet.address} ===`);

    await depositMON(wallet, cycleNumber);

    let delayTimeBeforeRedeem = getRandomDelay();
    console.log(
      `üîÑ ƒêang ch·ªù ${delayTimeBeforeRedeem / 1000} gi√¢y tr∆∞·ªõc khi y√™u c·∫ßu redeem...`
    );
    await delay(delayTimeBeforeRedeem);

    await redeemShMON(wallet, cycleNumber);

    const delayTimeBeforeBond = getRandomDelay();
    console.log(
      `üîÑ ƒêang ch·ªù ${delayTimeBeforeBond / 1000} gi√¢y tr∆∞·ªõc khi y√™u c·∫ßu commit...`
    );
    await delay(delayTimeBeforeBond);

    await bondShMON(wallet, cycleNumber);

    console.log(
      `=== Chu k·ª≥ ${cycleNumber} cho v√≠ ${wallet.address} ƒë√£ ho√†n th√†nh! ===`.magenta.bold
    );
  } catch (error) {
    console.error(`‚ùå Chu k·ª≥ ${cycleNumber} th·∫•t b·∫°i:`.red, error.message);
    throw error;
  }
}

async function processAccount(privateKey, cycleCount) {
  try {
    if (!privateKey.startsWith('0x')) {
      privateKey = '0x' + privateKey;
    }
    
    const wallet = new ethers.Wallet(privateKey, provider);
    const shortAddress = `${wallet.address.substring(0, 6)}...${wallet.address.substring(wallet.address.length - 4)}`;
    console.log(`\n=== ƒêang x·ª≠ l√Ω t√†i kho·∫£n ${shortAddress} ===`.cyan.bold);

    const initialBalance = await provider.getBalance(wallet.address);
    console.log(`Balance: ${ethers.utils.formatEther(initialBalance)} MON`.yellow);

    for (let i = 1; i <= cycleCount; i++) {
      await runCycle(wallet, i);

      if (i < cycleCount) {
        const interCycleDelay = getRandomDelay();
        console.log(
          `\nCh·ªù ${interCycleDelay / 1000} gi√¢y tr∆∞·ªõc chu k·ª≥ ti·∫øp theo...`
        );
        await delay(interCycleDelay);
      }
    }

    const finalBalance = await provider.getBalance(wallet.address);
    console.log(`\nS·ªë d∆∞ cu·ªëi c√πng: ${ethers.utils.formatEther(finalBalance)} MON`.yellow);
    
    const difference = finalBalance.sub(initialBalance);
    if (difference.gt(0)) {
      console.log(`Profit: +${ethers.utils.formatEther(difference)} MON`.green);
    } else {
      console.log(`Loss: ${ethers.utils.formatEther(difference)} MON`.red);
    }

    console.log(`=== ƒê√£ ho√†n t·∫•t qu√° tr√¨nh x·ª≠ l√Ω v√≠ ${shortAddress} ===`.cyan.bold);
    return true;
  } catch (error) {
    console.error(`‚ùå X·ª≠ l√Ω t√†i kho·∫£n kh√¥ng th√†nh c√¥ng:`.red, error.message);
    return false;
  }
}

async function processAllAccounts(cycleCount, intervalHours) {
  try {
    const privateKeys = readPrivateKeys();
    if (privateKeys.length === 0) {
      console.error("Kh√¥ng t√¨m th·∫•y privatekey trong wallet.txt".red);
      return false;
    }

    console.log(`üìã T√¨m th·∫•y ${privateKeys.length} v√≠ trong wallet.txt`.cyan);
    console.log(`Ch·∫°y ${cycleCount} chu k·ª≥ cho m·ªói t√†i kho·∫£n...`.yellow);

    for (let i = 0; i < privateKeys.length; i++) {
      console.log(`\nüîÑ ƒêang x·ª≠ l√Ω t√†i kho·∫£n ${i + 1} / ${privateKeys.length}`.cyan);
      const success = await processAccount(privateKeys[i], cycleCount);
      
      if (!success) {
        console.log(`‚ö†Ô∏è Kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c t√†i kho·∫£n ${i + 1}, chuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo`.yellow);
      }
      
      if (i < privateKeys.length - 1) {
        console.log("\nChuy·ªÉn sang t√†i kho·∫£n ti·∫øp theo sau 3 gi√¢y...".cyan);
        await delay(3000);
      }
    }

    console.log(
      `\n‚úÖ T·∫•t c·∫£ ${privateKeys.length} t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!`.green.bold
    );
    
    if (intervalHours) {
      console.log(`\n‚è±Ô∏è T·∫•t c·∫£ c√°c t√†i kho·∫£n ƒë∆∞·ª£c x·ª≠ l√Ω. ƒê·ª£t ti·∫øp theo s·∫Ω ch·∫°y sau ${intervalHours} gi·ªù`.cyan);
      setTimeout(() => processAllAccounts(cycleCount, intervalHours), intervalHours * 60 * 60 * 1000);
    }
    
    return true;
  } catch (error) {
    console.error("‚ùå Thao t√°c kh√¥ng th√†nh c√¥ng:".red, error.message);
    return false;
  }
}

function run() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question("B·∫°n mu·ªën ch·∫°y bao nhi√™u chu k·ª≥ cho m·ªói t√†i kho·∫£n? ", (answer) => {
    const cycleCount = parseInt(answer);
    
    if (isNaN(cycleCount) || cycleCount <= 0) {
      console.error("Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!".red);
      rl.close();
      process.exit(1);
    }
    
    rl.question(
      "B·∫°n mu·ªën chu k·ª≥ ch·∫°y bao l√¢u m·ªôt l·∫ßn (t√≠nh b·∫±ng gi·ªù)? (Nh·∫•n enter ƒë·ªÉ ch·∫°y ngay): ",
      (hours) => {
        let intervalHours = hours ? parseInt(hours) : null;
        
        if (hours && (isNaN(intervalHours) || intervalHours < 0)) {
          console.error("Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!".red);
          rl.close();
          process.exit(1);
        }
        processAllAccounts(cycleCount, intervalHours);
        rl.close();
      }
    );
  });
}

async function runAutomated(cycles = 1, intervalHours = null) {
  await processAllAccounts(cycles, intervalHours);
  return true;
}

module.exports = { 
  run, 
  runAutomated,
  depositMON,
  redeemShMON,
  bondShMON,
  getRandomAmount,
  getRandomDelay,
};

if (require.main === module) {
  run();
}